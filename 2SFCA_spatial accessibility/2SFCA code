import pandas as pd
import openrouteservice
import matplotlib.pyplot as plt
import numpy as np
import folium
from folium.plugins import HeatMap
import time
from openrouteservice.exceptions import ApiError

# --- CONFIG ---
ORS_KEY = 'your ors api key'
TRAVEL_TIME_THRESHOLD = 30  # minutes
POP_COLUMN = 'population'  # ✅ change if needed

# --- LOAD DATA ---
zcta_df = pd.read_csv(r'C:\zcta_score_data.csv')
provider_df = pd.read_csv(r'C:\vfc_providers_geocoded.csv')

# Ensure population column exists
if POP_COLUMN not in zcta_df.columns:
    raise ValueError(f"Missing population column: '{POP_COLUMN}'")

client = openrouteservice.Client(key=ORS_KEY)

# --- HELPER: Smart retry wrapper for ORS ---
def ors_matrix_with_retry(client, locations, profile, sources, destinations, max_retries=5, sleep_seconds=5):
    attempt = 0
    while attempt < max_retries:
        try:
            return client.distance_matrix(
                locations=locations,
                profile=profile,
                sources=sources,
                destinations=destinations,
                metrics=['duration'],
                resolve_locations=False
            )
        except ApiError as e:
            if "Rate limit exceeded" in str(e):
                wait = (attempt + 1) * sleep_seconds
                print(f"⏳ Rate limit hit. Waiting {wait}s before retrying (attempt {attempt + 1})...")
                time.sleep(wait)
                attempt += 1
            else:
                print(f"❌ ORS API error: {e}")
                break
        except Exception as e:
            print(f"⚠️ Unexpected error: {e}")
            break
    return None

# --- Convert to coordinate tuples ---
zcta_coords = list(zip(zcta_df['lon'], zcta_df['lat']))
provider_coords = list(zip(provider_df['lon'], provider_df['lat']))

# --- STEP 1: Calculate Rj for each provider ---
provider_ratios = []

for i, provider in provider_df.iterrows():
    print(f"🔄 Processing provider {i+1}/{len(provider_df)}")
    matrix = ors_matrix_with_retry(
        client=client,
        locations=[provider_coords[i]] + zcta_coords,
        profile='driving-car',
        sources=[0],
        destinations=list(range(1, len(zcta_coords) + 1))
    )

    if matrix is None or 'durations' not in matrix:
        durations = [None] * len(zcta_coords)
    else:
        durations = matrix['durations'][0]

    catchment_pop = 0
    skipped = 0
    for idx, duration in enumerate(durations):
        if duration is None:
            skipped += 1
            continue
        travel_time = duration / 60
        if travel_time <= TRAVEL_TIME_THRESHOLD:
            catchment_pop += zcta_df.loc[idx, POP_COLUMN]

    print(f"    Skipped {skipped} ZCTAs (None or unreachable)")
    Rj = 1 / catchment_pop if catchment_pop > 0 else 0
    provider_ratios.append({'Rj': Rj, 'coords': provider_coords[i]})

# --- STEP 2: Calculate As for each ZCTA ---
access_scores = []

for j, zcta in zcta_df.iterrows():
    print(f"🔄 Processing ZCTA {j+1}/{len(zcta_df)}")
    matrix = ors_matrix_with_retry(
        client=client,
        locations=[(zcta['lon'], zcta['lat'])] + provider_coords,
        profile='driving-car',
        sources=[0],
        destinations=list(range(1, len(provider_coords) + 1))
    )

    if matrix is None or 'durations' not in matrix:
        durations = [None] * len(provider_coords)
    else:
        durations = matrix['durations'][0]

    As = 0
    skipped = 0
    for idx, duration in enumerate(durations):
        if duration is None:
            skipped += 1
            continue
        travel_time = duration / 60
        if travel_time <= TRAVEL_TIME_THRESHOLD:
            As += provider_ratios[idx]['Rj']

    print(f"    Skipped {skipped} providers (None or unreachable)")
    access_scores.append(As)

# --- Add to DataFrame and Save ---
zcta_df['Accessibility_Score'] = np.round(access_scores, 6)

zcta_df[['ZCTA', 'Accessibility_Score']].to_excel('2sfca_vfc_ga.xlsx', index=False)
zcta_df[['ZCTA', 'Accessibility_Score']].to_csv('2sfca_vfc_ga.csv', index=False)
print("✅ Saved accessibility scores to Excel and CSV.")

# --- Folium Map ---
m = folium.Map(location=[33.75, -84.4], zoom_start=9)

heat_data = [
    [row['lat'], row['lon'], row['Accessibility_Score']]
    for _, row in zcta_df.iterrows() if row['Accessibility_Score'] > 0
]
HeatMap(heat_data, radius=15).add_to(m)

m.save('2sfca_vfc_map.html')
print("✅ Saved interactive map to '2sfca_vfc_map.html'")

# --- Matplotlib Plot ---
plt.figure(figsize=(10, 8))
sc = plt.scatter(
    zcta_df['lon'], zcta_df['lat'],
    c=zcta_df['Accessibility_Score'],
    cmap='viridis', s=100, edgecolors='black', label='ZCTAs'
)
plt.scatter(provider_df['lon'], provider_df['lat'], color='red', marker='^', s=150, label='VFC Providers')
plt.colorbar(sc, label='Accessibility Score (2SFCA)')
plt.title('Spatial Accessibility to VFC Providers in Georgia')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
